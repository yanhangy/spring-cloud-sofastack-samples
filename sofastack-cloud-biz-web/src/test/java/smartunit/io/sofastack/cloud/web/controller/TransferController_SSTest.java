/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.io.sofastack.cloud.web.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import io.sofastack.cloud.common.model.SerialOrder;
import io.sofastack.cloud.common.model.TradingOrder;
import io.sofastack.cloud.common.response.RestFacadeResp;
import io.sofastack.cloud.common.response.Result;
import io.sofastack.cloud.core.kafka.KafkaSender;
import io.sofastack.cloud.web.controller.TransferController;
import io.sofastack.cloud.web.model.RequestInfo;
import io.sofastack.cloud.web.service.AccountService;
import io.sofastack.cloud.web.service.TradeService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class)
@SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true)
public class TransferController_SSTest extends TransferController_SSTest_scaffolding {
    // allCoveredLines:[27, 41, 42, 45, 46, 48, 49, 50, 51, 52, 54, 55, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91]

    @Test(timeout = 4000)
    public void test_transfer_0() throws Throwable {
        //caseID:a485e230cc87719e4e4e1770ee1812bf
        //CoveredLines: [27, 41, 42, 45, 46, 58, 59, 66, 67, 68, 69]
        //Input_0_RequestInfo: {toString=\"1\", getUserId=49187}
        //Assert: assertFalse(method_result.isSuccess());

        TransferController transferController0 = new TransferController();
        //mock kafkaSender0
        KafkaSender kafkaSender0 = mock(KafkaSender.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock result0
        Result<SerialOrder> result0 = (Result<SerialOrder>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock accountService0
        AccountService accountService0 = mock(AccountService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(accountService0).transfer(
            any(io.sofastack.cloud.web.model.RequestInfo.class));

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "accountService", (Object) accountService0);

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "kafkaSender", (Object) kafkaSender0);
        //mock requestInfo0
        RequestInfo requestInfo0 = mock(RequestInfo.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(49187).when(requestInfo0).getUserId();
        doReturn("1").when(requestInfo0).toString();

        //Call method: transfer
        RestFacadeResp<String> restFacadeResp0 = transferController0.transfer(requestInfo0);

        //Test Result Assert
        assertFalse(restFacadeResp0.isSuccess());
    }

    @Test(timeout = 4000)
    public void test_transfer_1() throws Throwable {
        //caseID:62d2bcb019a4f4a6493f8827867bac39
        //CoveredLines: [27, 41, 42, 45, 46, 48, 49, 50, 51, 52, 57, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91]
        //Input_0_RequestInfo: {getTargetId=0, getRemark=\"49193\", toString=\"49193\", getMoney=(double)0, getUserId=0 0}
        //Assert: assertTrue(method_result.isSuccess());

        TransferController transferController0 = new TransferController();
        //mock kafkaSender0
        KafkaSender kafkaSender0 = mock(KafkaSender.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock serialOrder0
        SerialOrder serialOrder0 = mock(SerialOrder.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(0).when(serialOrder0).getDataFlag();
        doReturn("49193").when(serialOrder0).getId();
        //mock result0
        Result<SerialOrder> result0 = (Result<SerialOrder>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(serialOrder0).when(result0).getData();
        doReturn(true).when(result0).isSuccess();
        //mock accountService0
        AccountService accountService0 = mock(AccountService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(accountService0).transfer(
            any(io.sofastack.cloud.web.model.RequestInfo.class));
        //mock tradingOrder0
        TradingOrder tradingOrder0 = mock(TradingOrder.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("49193").when(tradingOrder0).getId();
        //mock result1
        Result<TradingOrder> result1 = (Result<TradingOrder>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(tradingOrder0).when(result1).getData();
        doReturn(true).when(result1).isSuccess();
        //mock tradeService0
        TradeService tradeService0 = mock(TradeService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result1).when(tradeService0).createTradingOrder(
            any(io.sofastack.cloud.common.model.TradingContext.class));

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "tradingService", (Object) tradeService0);

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "accountService", (Object) accountService0);

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "kafkaSender", (Object) kafkaSender0);
        //mock requestInfo0
        RequestInfo requestInfo0 = mock(RequestInfo.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn((double) 0).when(requestInfo0).getMoney();
        doReturn("49193").when(requestInfo0).getRemark();
        doReturn(0).when(requestInfo0).getTargetId();
        doReturn(0, 0).when(requestInfo0).getUserId();
        doReturn("49193").when(requestInfo0).toString();

        //Call method: transfer
        RestFacadeResp<String> restFacadeResp0 = transferController0.transfer(requestInfo0);

        //Test Result Assert
        assertTrue(restFacadeResp0.isSuccess());
    }

    @Test(timeout = 4000)
    public void test_transfer_2() throws Throwable {
        //caseID:04eec471b1aed98fd8d342a151e433ea
        //CoveredLines: [27, 41, 42, 45, 46, 48, 49, 50, 54, 55, 57, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91]
        //Input_0_RequestInfo: {getTargetId=0, getRemark=\"{c7bBl,#:B~<k.]Wt9\", toString=\"h.Spl\\\"u}^\\\",@)seu;y$\", getMoney=0.0, getUserId=593 (-1)}
        //Assert: assertFalse(method_result.isSuccess());

        TransferController transferController0 = new TransferController();
        //mock kafkaSender0
        KafkaSender kafkaSender0 = mock(KafkaSender.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock serialOrder0
        SerialOrder serialOrder0 = mock(SerialOrder.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(1).when(serialOrder0).getDataFlag();
        doReturn("\u652F\u4ED8\u5B9D").when(serialOrder0).getId();
        //mock result0
        Result<SerialOrder> result0 = (Result<SerialOrder>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(serialOrder0).when(result0).getData();
        doReturn(true).when(result0).isSuccess();
        //mock accountService0
        AccountService accountService0 = mock(AccountService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(accountService0).transfer(
            any(io.sofastack.cloud.web.model.RequestInfo.class));
        //mock result1
        Result<TradingOrder> result1 = (Result<TradingOrder>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("\u652F\u4ED8\u5B9D").when(result1).getErrorMsg();
        doReturn(false).when(result1).isSuccess();
        //mock tradeService0
        TradeService tradeService0 = mock(TradeService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result1).when(tradeService0).createTradingOrder(
            any(io.sofastack.cloud.common.model.TradingContext.class));

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "tradingService", (Object) tradeService0);

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "accountService", (Object) accountService0);

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "kafkaSender", (Object) kafkaSender0);
        //mock requestInfo0
        RequestInfo requestInfo0 = mock(RequestInfo.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(0.0).when(requestInfo0).getMoney();
        doReturn("{c7bBl,#:B~<k.]Wt9").when(requestInfo0).getRemark();
        doReturn(0).when(requestInfo0).getTargetId();
        doReturn(593, (-1)).when(requestInfo0).getUserId();
        doReturn("h.Spl\"u}^\",@)seu;y$").when(requestInfo0).toString();

        //Call method: transfer
        RestFacadeResp<String> restFacadeResp0 = transferController0.transfer(requestInfo0);

        //Test Result Assert
        assertFalse(restFacadeResp0.isSuccess());
    }

    @Test(timeout = 4000)
    public void test_transfer_3() throws Throwable {
        //caseID:93c4122dcfd777e6862819dc21459fa9
        //CoveredLines: [27, 41, 42, 45, 46, 48, 49, 50, 51, 61, 62, 63, 64, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91]
        //Input_0_RequestInfo: {getTargetId=1, getRemark=\"206\", toString=\"206\", getMoney=(double)1, getUserId=1 1}
        //Assert: assertFalse(method_result.isSuccess());

        TransferController transferController0 = new TransferController();
        //mock kafkaSender0
        KafkaSender kafkaSender0 = mock(KafkaSender.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock serialOrder0
        SerialOrder serialOrder0 = mock(SerialOrder.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(1).when(serialOrder0).getDataFlag();
        doReturn("206").when(serialOrder0).getId();
        //mock result0
        Result<SerialOrder> result0 = (Result<SerialOrder>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(serialOrder0).when(result0).getData();
        doReturn(true).when(result0).isSuccess();
        //mock accountService0
        AccountService accountService0 = mock(AccountService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(accountService0).transfer(
            any(io.sofastack.cloud.web.model.RequestInfo.class));
        //mock result1
        Result<TradingOrder> result1 = (Result<TradingOrder>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("206").when(result1).getErrorMsg();
        doReturn(true).when(result1).isSuccess();
        //mock tradeService0
        TradeService tradeService0 = mock(TradeService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result1).when(tradeService0).createTradingOrder(
            any(io.sofastack.cloud.common.model.TradingContext.class));

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "tradingService", (Object) tradeService0);

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "accountService", (Object) accountService0);

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "kafkaSender", (Object) kafkaSender0);
        //mock requestInfo0
        RequestInfo requestInfo0 = mock(RequestInfo.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn((double) 1).when(requestInfo0).getMoney();
        doReturn("206").when(requestInfo0).getRemark();
        doReturn(1).when(requestInfo0).getTargetId();
        doReturn(1, 1).when(requestInfo0).getUserId();
        doReturn("206").when(requestInfo0).toString();

        //Call method: transfer
        RestFacadeResp<String> restFacadeResp0 = transferController0.transfer(requestInfo0);

        //Test Result Assert
        assertFalse(restFacadeResp0.isSuccess());
    }

    @Test(timeout = 4000)
    public void test_transfer_4() throws Throwable {
        //caseID:4c09c37e0c971a2f341ca5ab313d971e
        //CoveredLines: [27, 41, 42, 45, 46, 48, 49, 50, 51, 61, 62, 63, 64, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91]
        //Input_0_RequestInfo: {getTargetId=0, getRemark=\"flufLA;Yu=G@\", toString=\"flufLA;Yu=G@\", getMoney=(double)0, getUserId=0 0}
        //Assert: assertFalse(method_result.isSuccess());

        TransferController transferController0 = new TransferController();
        //mock kafkaSender0
        KafkaSender kafkaSender0 = mock(KafkaSender.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock serialOrder0
        SerialOrder serialOrder0 = mock(SerialOrder.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(0).when(serialOrder0).getDataFlag();
        doReturn("flufLA;Yu=G@").when(serialOrder0).getId();
        //mock result0
        Result<SerialOrder> result0 = (Result<SerialOrder>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(serialOrder0).when(result0).getData();
        doReturn(true).when(result0).isSuccess();
        //mock accountService0
        AccountService accountService0 = mock(AccountService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(accountService0).transfer(
            any(io.sofastack.cloud.web.model.RequestInfo.class));
        //mock result1
        Result<TradingOrder> result1 = (Result<TradingOrder>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("flufLA;Yu=G@").when(result1).getErrorMsg();
        doReturn(true).when(result1).isSuccess();
        //mock tradeService0
        TradeService tradeService0 = mock(TradeService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result1).when(tradeService0).createTradingOrder(
            any(io.sofastack.cloud.common.model.TradingContext.class));

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "tradingService", (Object) tradeService0);

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "accountService", (Object) accountService0);

        PrivateAccess.setVariable((Class<?>) TransferController.class, transferController0,
            "kafkaSender", (Object) kafkaSender0);
        //mock requestInfo0
        RequestInfo requestInfo0 = mock(RequestInfo.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn((double) 0).when(requestInfo0).getMoney();
        doReturn("flufLA;Yu=G@").when(requestInfo0).getRemark();
        doReturn(0).when(requestInfo0).getTargetId();
        doReturn(0, 0).when(requestInfo0).getUserId();
        doReturn("flufLA;Yu=G@").when(requestInfo0).toString();

        //Call method: transfer
        RestFacadeResp<String> restFacadeResp0 = transferController0.transfer(requestInfo0);

        //Test Result Assert
        assertFalse(restFacadeResp0.isSuccess());
    }
}
