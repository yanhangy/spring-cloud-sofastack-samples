/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.io.sofastack.cloud.web.fallback;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import io.sofastack.cloud.common.model.UserDetails;
import io.sofastack.cloud.common.response.Result;
import io.sofastack.cloud.web.fallback.UserServiceFallbackImpl;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class)
@SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true)
public class UserServiceFallbackImpl_SSTest extends UserServiceFallbackImpl_SSTest_scaffolding {
    // allCoveredLines:[13, 17, 18, 19, 20, 21, 26, 27, 28, 29, 30]

    @Test(timeout = 4000)
    public void test_queryUserDetail_0() throws Throwable {
        //caseID:9f42b836237ac2d37238efcdacc2ebf8
        //CoveredLines: [13, 17, 18, 19, 20, 21]
        //Input_0_int: 1
        //Assert: assertFalse(method_result.isSuccess());
        //Assert: assertEquals("Query User Details Error, Please Try Later!", method_result.getErrorMsg());

        UserServiceFallbackImpl userServiceFallbackImpl0 = new UserServiceFallbackImpl();

        //Call method: queryUserDetail
        Result<UserDetails> result0 = userServiceFallbackImpl0.queryUserDetail(1);

        //Test Result Assert
        assertFalse(result0.isSuccess());

        //Test Result Assert
        assertEquals("Query User Details Error, Please Try Later!", result0.getErrorMsg());
    }

    @Test(timeout = 4000)
    public void test_register_1() throws Throwable {
        //caseID:b10930dc4b308b69c627f72a3020abff
        //CoveredLines: [13, 26, 27, 28, 29, 30]
        //Input_0_UserDetails: {}
        //Assert: assertFalse(method_result.isSuccess());
        //Assert: assertEquals("Register User Error, Please Try Later!", method_result.getErrorMsg());

        UserServiceFallbackImpl userServiceFallbackImpl0 = new UserServiceFallbackImpl();
        //mock userDetails0
        UserDetails userDetails0 = mock(UserDetails.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        //Call method: register
        Result<UserDetails> result0 = userServiceFallbackImpl0.register(userDetails0);

        //Test Result Assert
        assertFalse(result0.isSuccess());

        //Test Result Assert
        assertEquals("Register User Error, Please Try Later!", result0.getErrorMsg());
    }
}
