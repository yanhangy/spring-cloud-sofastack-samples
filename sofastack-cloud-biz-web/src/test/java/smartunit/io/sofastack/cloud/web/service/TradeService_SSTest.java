/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.io.sofastack.cloud.web.service;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import io.sofastack.cloud.common.model.TradingContext;
import io.sofastack.cloud.common.model.TradingOrder;
import io.sofastack.cloud.common.response.Result;
import io.sofastack.cloud.facade.trading.TradingService;
import io.sofastack.cloud.web.service.TradeService;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class)
@SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true)
public class TradeService_SSTest extends TradeService_SSTest_scaffolding {
    // allCoveredLines:[18, 30, 40]

    @Test(timeout = 4000)
    public void test_createTradingOrder_0() throws Throwable {
        //caseID:52251e288564d31fa7807644f9700e1e
        //CoveredLines: [18, 30]
        //Input_0_TradingContext: {}
        //Assert: assertNull(method_result);

        TradeService tradeService0 = new TradeService();
        //mock tradingService0
        TradingService tradingService0 = mock(TradingService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) TradeService.class, tradeService0, "tradingService",
            (Object) tradingService0);
        //mock tradingContext0
        TradingContext tradingContext0 = mock(TradingContext.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        //Call method: createTradingOrder
        Result<TradingOrder> result0 = tradeService0.createTradingOrder(tradingContext0);

        //Test Result Assert
        assertNull(result0);
    }

    @Test(timeout = 4000)
    public void test_queryTradingOrder_1() throws Throwable {
        //caseID:3924b18ce1b56e998772205d183f8877
        //CoveredLines: [18, 40]
        //Input_0_String: 1
        //Assert: assertNull(method_result);

        TradeService tradeService0 = new TradeService();
        //mock tradingService0
        TradingService tradingService0 = mock(TradingService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) TradeService.class, tradeService0, "tradingService",
            (Object) tradingService0);

        //Call method: queryTradingOrder
        Result<TradingOrder> result0 = tradeService0.queryTradingOrder("1");

        //Test Result Assert
        assertNull(result0);
    }
}
