/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.io.sofastack.cloud.auth.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import io.sofastack.cloud.auth.controller.AuthController;
import io.sofastack.cloud.auth.model.AuthRequest;
import io.sofastack.cloud.auth.model.RegisterRequest;
import io.sofastack.cloud.auth.service.AccountService;
import io.sofastack.cloud.auth.service.UserService;
import io.sofastack.cloud.common.model.UserDetails;
import io.sofastack.cloud.common.response.RestFacadeResp;
import io.sofastack.cloud.common.response.Result;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class)
@SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true)
public class AuthController_SSTest extends AuthController_SSTest_scaffolding {
    // allCoveredLines:[28, 40, 42, 43, 44, 45, 48, 49, 50, 51, 53, 54, 55, 56, 58, 60, 61, 62, 63, 64, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96]

    @Test(timeout = 4000)
    public void test_register_0() throws Throwable {
        //caseID:8878deacc4f9c564d5007910283638e4
        //CoveredLines: [28, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 88, 89, 95, 96]
        //Input_0_HttpServletRequest: {getSession=httpSession0}
        //Input_1_RegisterRequest: {getPassword=\"org.apache.commons.io.filefilter.CanWriteFileFilter\" \"org.apache.commons.io.filefilter.CanWriteFileFilter\", getEmail=\"org.apache.commons.io.filefilter.CanWriteFileFilter\", getUserName=\"org.apache.commons.io.filefilter.CanWriteFileFilter\" \"org.apache.commons.io.filefilter.CanWriteFileFilter\"}
        //Assert: assertFalse(method_result.isSuccess());

        AuthController authController0 = new AuthController();
        //mock result0
        Result<UserDetails> result0 = (Result<UserDetails>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("org.apache.commons.io.filefilter.CanWriteFileFilter").when(result0).getErrorMsg();
        doReturn(false).when(result0).isSuccess();
        //mock userService0
        UserService userService0 = mock(UserService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(userService0).register(
            any(io.sofastack.cloud.common.model.UserDetails.class));

        PrivateAccess.setVariable((Class<?>) AuthController.class, authController0, "userService",
            (Object) userService0);
        //mock httpSession0
        HttpSession httpSession0 = mock(HttpSession.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock httpServletRequest0
        HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(httpSession0).when(httpServletRequest0).getSession();
        //mock registerRequest0
        RegisterRequest registerRequest0 = mock(RegisterRequest.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("org.apache.commons.io.filefilter.CanWriteFileFilter").when(registerRequest0)
            .getEmail();
        doReturn("org.apache.commons.io.filefilter.CanWriteFileFilter",
            "org.apache.commons.io.filefilter.CanWriteFileFilter").when(registerRequest0)
            .getPassword();
        doReturn("org.apache.commons.io.filefilter.CanWriteFileFilter",
            "org.apache.commons.io.filefilter.CanWriteFileFilter").when(registerRequest0)
            .getUserName();

        //Call method: register
        RestFacadeResp<Integer> restFacadeResp0 = authController0.register(httpServletRequest0,
            registerRequest0);

        //Test Result Assert
        assertFalse(restFacadeResp0.isSuccess());
    }

    @Test(timeout = 4000)
    public void test_register_1() throws Throwable {
        //caseID:1c3246ddcb4e59c89912837583f467aa
        //CoveredLines: [28, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 91, 92, 93, 94, 96]
        //Input_0_HttpServletRequest: {getSession=httpSession0}
        //Input_1_RegisterRequest: {getPassword=\"org.apache.commons.io.filefilter.CanWriteFileFilter\" \"org.apache.commons.io.filefilter.CanWriteFileFilter\", getEmail=\"org.apache.commons.io.filefilter.CanWriteFileFilter\", getUserName=\"org.apache.commons.io.filefilter.CanWriteFileFilter\" \"org.apache.commons.io.filefilter.CanWriteFileFilter\"}
        //Assert: assertFalse(method_result.isSuccess());

        AuthController authController0 = new AuthController();
        //mock result0
        Result<UserDetails> result0 = (Result<UserDetails>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("org.apache.commons.io.filefilter.CanWriteFileFilter").when(result0).getErrorMsg();
        doReturn(true).when(result0).isSuccess();
        //mock userService0
        UserService userService0 = mock(UserService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(userService0).register(
            any(io.sofastack.cloud.common.model.UserDetails.class));

        PrivateAccess.setVariable((Class<?>) AuthController.class, authController0, "userService",
            (Object) userService0);
        //mock httpSession0
        HttpSession httpSession0 = mock(HttpSession.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock httpServletRequest0
        HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(httpSession0).when(httpServletRequest0).getSession();
        //mock registerRequest0
        RegisterRequest registerRequest0 = mock(RegisterRequest.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("org.apache.commons.io.filefilter.CanWriteFileFilter").when(registerRequest0)
            .getEmail();
        doReturn("org.apache.commons.io.filefilter.CanWriteFileFilter",
            "org.apache.commons.io.filefilter.CanWriteFileFilter").when(registerRequest0)
            .getPassword();
        doReturn("org.apache.commons.io.filefilter.CanWriteFileFilter",
            "org.apache.commons.io.filefilter.CanWriteFileFilter").when(registerRequest0)
            .getUserName();

        //Call method: register
        RestFacadeResp<Integer> restFacadeResp0 = authController0.register(httpServletRequest0,
            registerRequest0);

        //Test Result Assert
        assertFalse(restFacadeResp0.isSuccess());
    }

    @Test(timeout = 4000)
    public void test_register_2() throws Throwable {
        //caseID:436e7ed7382103730527cad801f45ed4
        //CoveredLines: [28, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 95, 96]
        //Input_0_HttpServletRequest: {getSession=httpSession0}
        //Input_1_RegisterRequest: {getPassword=\"org.apache.commons.io.filefilter.CanWriteFileFilter\" \"org.apache.commons.io.filefilter.CanWriteFileFilter\", getEmail=\"org.apache.commons.io.filefilter.CanWriteFileFilter\", getUserName=\"org.apache.commons.io.filefilter.CanWriteFileFilter\" \"org.apache.commons.io.filefilter.CanWriteFileFilter\"}
        //Assert: assertTrue(method_result.isSuccess());

        AuthController authController0 = new AuthController();
        //mock accountService0
        AccountService accountService0 = mock(AccountService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock userDetails0
        UserDetails userDetails0 = mock(UserDetails.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock result0
        Result<UserDetails> result0 = (Result<UserDetails>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(userDetails0).when(result0).getData();
        doReturn(true).when(result0).isSuccess();
        //mock userService0
        UserService userService0 = mock(UserService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(userService0).register(
            any(io.sofastack.cloud.common.model.UserDetails.class));

        PrivateAccess.setVariable((Class<?>) AuthController.class, authController0, "userService",
            (Object) userService0);

        PrivateAccess.setVariable((Class<?>) AuthController.class, authController0,
            "accountService", (Object) accountService0);
        //mock httpSession0
        HttpSession httpSession0 = mock(HttpSession.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock httpServletRequest0
        HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(httpSession0).when(httpServletRequest0).getSession();
        //mock registerRequest0
        RegisterRequest registerRequest0 = mock(RegisterRequest.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("org.apache.commons.io.filefilter.CanWriteFileFilter").when(registerRequest0)
            .getEmail();
        doReturn("org.apache.commons.io.filefilter.CanWriteFileFilter",
            "org.apache.commons.io.filefilter.CanWriteFileFilter").when(registerRequest0)
            .getPassword();
        doReturn("org.apache.commons.io.filefilter.CanWriteFileFilter",
            "org.apache.commons.io.filefilter.CanWriteFileFilter").when(registerRequest0)
            .getUserName();

        //Call method: register
        RestFacadeResp<Integer> restFacadeResp0 = authController0.register(httpServletRequest0,
            registerRequest0);

        //Test Result Assert
        assertTrue(restFacadeResp0.isSuccess());
    }

    @Test(timeout = 4000)
    public void test_valid_3() throws Throwable {
        //caseID:9ed1c4e7d568586f64de5cec834fb71e
        //CoveredLines: [28, 40, 42, 43, 48, 53, 54, 60, 61, 62, 64]
        //Input_0_HttpServletRequest: {getSession=httpSession0}
        //Input_1_AuthRequest: {getUserName=\"\"}
        //Assert: assertFalse(method_result.isSuccess());

        AuthController authController0 = new AuthController();
        //mock userService0
        UserService userService0 = mock(UserService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) AuthController.class, authController0, "userService",
            (Object) userService0);
        //mock httpSession0
        HttpSession httpSession0 = mock(HttpSession.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock httpServletRequest0
        HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(httpSession0).when(httpServletRequest0).getSession();
        //mock authRequest0
        AuthRequest authRequest0 = mock(AuthRequest.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("").when(authRequest0).getUserName();

        //Call method: valid
        RestFacadeResp<Integer> restFacadeResp0 = authController0.valid(httpServletRequest0,
            authRequest0);

        //Test Result Assert
        assertFalse(restFacadeResp0.isSuccess());
    }

    @Test(timeout = 4000)
    public void test_valid_4() throws Throwable {
        //caseID:598b3190d2c7995abd1e9b2e88c4018d
        //CoveredLines: [28, 40, 42, 43, 48, 49, 50, 51, 53, 54, 58, 63, 64]
        //Input_0_HttpServletRequest: {getSession=httpSession0 httpSession1}
        //Input_1_AuthRequest: null
        //Assert: assertFalse(method_result.isSuccess());

        AuthController authController0 = new AuthController();
        //mock result0
        Result<UserDetails> result0 = (Result<UserDetails>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(false).when(result0).isSuccess();
        //mock userService0
        UserService userService0 = mock(UserService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(userService0).validate(
            any(io.sofastack.cloud.common.model.UserDetails.class));

        PrivateAccess.setVariable((Class<?>) AuthController.class, authController0, "userService",
            (Object) userService0);
        //mock userDetails0
        UserDetails userDetails0 = mock(UserDetails.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("admin").when(userDetails0).getPassword();
        doReturn("iZ").when(userDetails0).getUserName();
        //mock result1
        Result<String> result1 = (Result<String>) mock(Result.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock httpSession0
        HttpSession httpSession0 = mock(HttpSession.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result1).when(httpSession0).getAttribute(anyString());
        //mock httpSession1
        HttpSession httpSession1 = mock(HttpSession.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(userDetails0).when(httpSession1).getAttribute(anyString());
        //mock httpServletRequest0
        HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(httpSession0, httpSession1).when(httpServletRequest0).getSession();

        //Call method: valid
        RestFacadeResp<Integer> restFacadeResp0 = authController0.valid(httpServletRequest0,
            (AuthRequest) null);

        //Test Result Assert
        assertFalse(restFacadeResp0.isSuccess());
    }

    @Test(timeout = 4000)
    public void test_valid_5() throws Throwable {
        //caseID:ebfb4ce5c393ec8d9615b289a4881f3a
        //CoveredLines: [28, 40, 42, 43, 48, 49, 50, 51, 53, 54, 58, 63, 64]
        //Input_0_HttpServletRequest: {getSession=httpSession0}
        //Input_1_AuthRequest: {getUserName=\"\"}
        //Assert: assertFalse(method_result.isSuccess());

        AuthController authController0 = new AuthController();
        //mock result0
        Result<UserDetails> result0 = (Result<UserDetails>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock userService0
        UserService userService0 = mock(UserService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(userService0).validate(
            any(io.sofastack.cloud.common.model.UserDetails.class));

        PrivateAccess.setVariable((Class<?>) AuthController.class, authController0, "userService",
            (Object) userService0);
        //mock userDetails0
        UserDetails userDetails0 = mock(UserDetails.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock httpSession0
        HttpSession httpSession0 = mock(HttpSession.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(userDetails0).when(httpSession0).getAttribute(anyString());
        //mock httpServletRequest0
        HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(httpSession0).when(httpServletRequest0).getSession();
        //mock authRequest0
        AuthRequest authRequest0 = mock(AuthRequest.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("").when(authRequest0).getUserName();

        //Call method: valid
        RestFacadeResp<Integer> restFacadeResp0 = authController0.valid(httpServletRequest0,
            authRequest0);

        //Test Result Assert
        assertFalse(restFacadeResp0.isSuccess());
    }

    @Test(timeout = 4000)
    public void test_valid_6() throws Throwable {
        //caseID:9660b41f176550843482b1261a06f5de
        //CoveredLines: [28, 40, 42, 43, 48, 49, 50, 51, 53, 54, 55, 56, 63, 64]
        //Input_0_HttpServletRequest: {getSession=httpSession0 httpSession1}
        //Input_1_AuthRequest: {getUserName=\"\"}
        //Assert: assertTrue(method_result.isSuccess());

        AuthController authController0 = new AuthController();
        //mock userDetails0
        UserDetails userDetails0 = mock(UserDetails.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(1).when(userDetails0).getUserId();
        //mock result0
        Result<UserDetails> result0 = (Result<UserDetails>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(userDetails0).when(result0).getData();
        doReturn(true).when(result0).isSuccess();
        //mock userService0
        UserService userService0 = mock(UserService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(userService0).validate(
            any(io.sofastack.cloud.common.model.UserDetails.class));

        PrivateAccess.setVariable((Class<?>) AuthController.class, authController0, "userService",
            (Object) userService0);
        //mock userDetails1
        UserDetails userDetails1 = mock(UserDetails.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("0").when(userDetails1).getPassword();
        doReturn(">").when(userDetails1).getUserName();
        //mock httpSession0
        HttpSession httpSession0 = mock(HttpSession.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(authController0).when(httpSession0).getAttribute(anyString());
        //mock httpSession1
        HttpSession httpSession1 = mock(HttpSession.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(userDetails1).when(httpSession1).getAttribute(anyString());
        //mock httpServletRequest0
        HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(httpSession0, httpSession1).when(httpServletRequest0).getSession();
        //mock authRequest0
        AuthRequest authRequest0 = mock(AuthRequest.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("").when(authRequest0).getUserName();

        //Call method: valid
        RestFacadeResp<Integer> restFacadeResp0 = authController0.valid(httpServletRequest0,
            authRequest0);

        //Test Result Assert
        assertTrue(restFacadeResp0.isSuccess());
    }

    @Test(timeout = 4000)
    public void test_valid_7() throws Throwable {
        //caseID:edfc28f81bdb0d35fcd539b997f1a2c4
        //CoveredLines: [28, 40, 42, 43, 44, 45, 53, 54, 55, 56, 60, 61, 62, 64]
        //Input_0_HttpServletRequest: {}
        //Input_1_AuthRequest: {getPassword=\"Failed to register user;\", getUserName=\"Failed to register user;\" \"Failed to register user;\"}
        //Assert: assertFalse(method_result.isSuccess());

        AuthController authController0 = new AuthController();
        //mock result0
        Result<UserDetails> result0 = (Result<UserDetails>) mock(Result.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(true).when(result0).isSuccess();
        //mock userService0
        UserService userService0 = mock(UserService.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(result0).when(userService0).validate(
            any(io.sofastack.cloud.common.model.UserDetails.class));

        PrivateAccess.setVariable((Class<?>) AuthController.class, authController0, "userService",
            (Object) userService0);
        //mock httpServletRequest0
        HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock authRequest0
        AuthRequest authRequest0 = mock(AuthRequest.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("Failed to register user;").when(authRequest0).getPassword();
        doReturn("Failed to register user;", "Failed to register user;").when(authRequest0)
            .getUserName();

        //Call method: valid
        RestFacadeResp<Integer> restFacadeResp0 = authController0.valid(httpServletRequest0,
            authRequest0);

        //Test Result Assert
        assertFalse(restFacadeResp0.isSuccess());
    }
}
