/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.io.sofastack.cloud.accounting.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import io.sofastack.cloud.accounting.entity.AccountingEntity;
import java.math.BigDecimal;
import java.util.Date;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class AccountingEntity_SSTest extends AccountingEntity_SSTest_scaffolding {
// allCoveredLines:[10, 25, 29, 30, 33, 37, 38, 41, 45, 46, 49, 53, 54, 57, 61, 62, 65, 69, 70, 73, 77, 78, 81, 85, 86, 89, 93, 94, 97, 101, 102, 105, 109, 110, 113, 117, 118]

  @Test(timeout = 4000)
  public void test_getAvailableAssets_00()  throws Throwable  {
      //caseID:6b73587b37afbad591492b5fd814497c
      //CoveredLines: [10, 57]
      //Assert: assertSame(method_result, bigDecimal0);
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      
      PrivateAccess.setVariable((Class<?>) AccountingEntity.class, accountingEntity0, "availableAssets", (Object) bigDecimal0);
      
      //Call method: getAvailableAssets
      BigDecimal bigDecimal1 = accountingEntity0.getAvailableAssets();
      
      //Test Result Assert
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test_getCreateTime_01()  throws Throwable  {
      //caseID:1b847ca9a1dab0b10ec7374d035fdac2
      //CoveredLines: [10, 73]
      //Assert: assertNull(method_result);
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: getCreateTime
      Date date0 = accountingEntity0.getCreateTime();
      
      //Test Result Assert
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test_getFrozenAssets_02()  throws Throwable  {
      //caseID:c28b0f671559b954eb0b0b5a7ccda08b
      //CoveredLines: [10, 49]
      //Assert: assertEquals((short)1, method_result.shortValue());
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      PrivateAccess.setVariable((Class<?>) AccountingEntity.class, accountingEntity0, "frozenAssets", (Object) bigDecimal0);
      
      //Call method: getFrozenAssets
      BigDecimal bigDecimal1 = accountingEntity0.getFrozenAssets();
      
      //Test Result Assert
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test_getId_03()  throws Throwable  {
      //caseID:6d4d0877e3ef18c1dfb9e77377cdf315
      //CoveredLines: [10, 25]
      //Assert: assertEquals(0, method_result);
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: getId
      int int0 = accountingEntity0.getId();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getLevel_04()  throws Throwable  {
      //caseID:8b337f62d1909b8c09176f6857c8c938
      //CoveredLines: [10, 89]
      //Assert: assertEquals(0, method_result);
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: getLevel
      int int0 = accountingEntity0.getLevel();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getPayPassword_05()  throws Throwable  {
      //caseID:653612dfe82e2c5f91c9aa6557bec884
      //CoveredLines: [10, 105]
      //Assert: assertNull(method_result);
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: getPayPassword
      String string0 = accountingEntity0.getPayPassword();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getPoints_06()  throws Throwable  {
      //caseID:77310c3bce4bcf4bf0e69f711a46c3b4
      //CoveredLines: [10, 97]
      //Assert: assertEquals(0, method_result);
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: getPoints
      int int0 = accountingEntity0.getPoints();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_getReservedField_07()  throws Throwable  {
      //caseID:aef4ecfbc772010549b3662df223d0f1
      //CoveredLines: [10, 113]
      //Assert: assertNull(method_result);
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: getReservedField
      String string0 = accountingEntity0.getReservedField();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getState_08()  throws Throwable  {
      //caseID:7dc01f20879ec488282d90e66930e2c9
      //CoveredLines: [10, 65]
      //Assert: assertNull(method_result);
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: getState
      String string0 = accountingEntity0.getState();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getTotalAssets_09()  throws Throwable  {
      //caseID:074d6872d49f5a4ab374dd4633c048af
      //CoveredLines: [10, 41]
      //Assert: assertEquals((byte)1, method_result.byteValue());
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      PrivateAccess.setVariable((Class<?>) AccountingEntity.class, accountingEntity0, "totalAssets", (Object) bigDecimal0);
      
      //Call method: getTotalAssets
      BigDecimal bigDecimal1 = accountingEntity0.getTotalAssets();
      
      //Test Result Assert
      assertEquals((byte)1, bigDecimal1.byteValue());
  }

  @Test(timeout = 4000)
  public void test_getType_10()  throws Throwable  {
      //caseID:c035b669016e40f4ad8ba7ead03c9e32
      //CoveredLines: [10, 81]
      //Assert: assertNull(method_result);
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: getType
      String string0 = accountingEntity0.getType();
      
      //Test Result Assert
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test_getUserId_11()  throws Throwable  {
      //caseID:68184651ab2df15255a1263c185ee471
      //CoveredLines: [10, 33]
      //Assert: assertEquals(0, method_result);
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: getUserId
      int int0 = accountingEntity0.getUserId();
      
      //Test Result Assert
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test_setAvailableAssets_12()  throws Throwable  {
      //caseID:eabd137200d6205826581ca249cf218b
      //CoveredLines: [10, 61, 62]
      //Input_0_BigDecimal: BigDecimal.ONE
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setAvailableAssets
      accountingEntity0.setAvailableAssets(bigDecimal0);
      
      //Test Result Assert
      assertEquals((short)1, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test_setCreateTime_13()  throws Throwable  {
      //caseID:168f382250a9afa38d867a2261e6ca87
      //CoveredLines: [10, 77, 78]
      //Input_0_Date: {}
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      //mock date0
      Date date0 = mock(Date.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: setCreateTime
      accountingEntity0.setCreateTime(date0);
      
      //Test Result Assert
      assertEquals(0, accountingEntity0.getLevel());
  }

  @Test(timeout = 4000)
  public void test_setFrozenAssets_14()  throws Throwable  {
      //caseID:b5ab04b0be552e60a7defb55717b0617
      //CoveredLines: [10, 53, 54]
      //Input_0_BigDecimal: BigDecimal.ONE
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      
      //Call method: setFrozenAssets
      accountingEntity0.setFrozenAssets(bigDecimal0);
      
      //Test Result Assert
      assertNull(accountingEntity0.getType());
  }

  @Test(timeout = 4000)
  public void test_setId_15()  throws Throwable  {
      //caseID:79115e376ffc350e68b47b2029e43b58
      //CoveredLines: [10, 29, 30]
      //Input_0_int: 2147483647
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: setId
      accountingEntity0.setId(Integer.MAX_VALUE);
      
      //Test Result Assert
      assertEquals(Integer.MAX_VALUE, accountingEntity0.getId());
  }

  @Test(timeout = 4000)
  public void test_setLevel_16()  throws Throwable  {
      //caseID:621fc3bedc5a7c1ee8a18c3ffeea714f
      //CoveredLines: [10, 93, 94]
      //Input_0_int: -1
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: setLevel
      accountingEntity0.setLevel((-1));
      
      //Test Result Assert
      assertEquals((-1), accountingEntity0.getLevel());
  }

  @Test(timeout = 4000)
  public void test_setPayPassword_17()  throws Throwable  {
      //caseID:f65bd2b9f60ef70d03b9e12ed0a17d85
      //CoveredLines: [10, 109, 110]
      //Input_0_String: 6S
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: setPayPassword
      accountingEntity0.setPayPassword("6S");
      
      //Test Result Assert
      assertEquals(0, accountingEntity0.getLevel());
  }

  @Test(timeout = 4000)
  public void test_setPoints_18()  throws Throwable  {
      //caseID:45f2a81596299a981750d337166280f8
      //CoveredLines: [10, 101, 102]
      //Input_0_int: -1
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: setPoints
      accountingEntity0.setPoints((-1));
      
      //Test Result Assert
      assertEquals((-1), accountingEntity0.getPoints());
  }

  @Test(timeout = 4000)
  public void test_setReservedField_19()  throws Throwable  {
      //caseID:c2045fdb7b2656c545afe4f42da5eb51
      //CoveredLines: [10, 117, 118]
      //Input_0_String: t[
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: setReservedField
      accountingEntity0.setReservedField("t[");
      
      //Test Result Assert
      assertEquals(0, accountingEntity0.getPoints());
  }

  @Test(timeout = 4000)
  public void test_setState_20()  throws Throwable  {
      //caseID:b6bcf47e6d9872629608981fd2e6296e
      //CoveredLines: [10, 69, 70]
      //Input_0_String: No XMLEvent List
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: setState
      accountingEntity0.setState("No XMLEvent List");
      
      //Test Result Assert
      assertEquals("No XMLEvent List", accountingEntity0.getState());
  }

  @Test(timeout = 4000)
  public void test_setTotalAssets_21()  throws Throwable  {
      //caseID:33b53ce832f95aa43cce1d6cec3ff894
      //CoveredLines: [10, 45, 46]
      //Input_0_BigDecimal: BigDecimal.TEN
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      
      //Call method: setTotalAssets
      accountingEntity0.setTotalAssets(bigDecimal0);
      
      //Test Result Assert
      assertEquals(0, accountingEntity0.getPoints());
  }

  @Test(timeout = 4000)
  public void test_setType_22()  throws Throwable  {
      //caseID:e842a5a7d9926659db58c45084cb5ae9
      //CoveredLines: [10, 85, 86]
      //Input_0_String: fST<Zf|>rPop
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: setType
      accountingEntity0.setType("fST<Zf|>rPop");
      
      //Test Result Assert
      assertEquals(0, accountingEntity0.getUserId());
  }

  @Test(timeout = 4000)
  public void test_setUserId_23()  throws Throwable  {
      //caseID:e78c8cff83357d6b7c46639e9c7961b0
      //CoveredLines: [10, 37, 38]
      //Input_0_int: 21
      
      AccountingEntity accountingEntity0 = new AccountingEntity();
      
      //Call method: setUserId
      accountingEntity0.setUserId(21);
      
      //Test Result Assert
      assertEquals(21, accountingEntity0.getUserId());
  }
}
