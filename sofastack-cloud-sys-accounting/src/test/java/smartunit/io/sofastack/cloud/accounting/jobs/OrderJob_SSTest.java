/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.io.sofastack.cloud.accounting.jobs;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import io.sofastack.cloud.accounting.dao.AccountingMapper;
import io.sofastack.cloud.accounting.dao.BillMapper;
import io.sofastack.cloud.accounting.dao.SerialOrderMapper;
import io.sofastack.cloud.accounting.jobs.OrderJob;
import io.sofastack.cloud.common.model.SerialOrder;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedList;
import org.junit.runner.RunWith;
import org.quartz.JobExecutionContext;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class)
@SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true)
public class OrderJob_SSTest extends OrderJob_SSTest_scaffolding {
    // allCoveredLines:[24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60]

    @Test(timeout = 4000)
    public void test_executeInternal_0() throws Throwable {
        //caseID:a1e8151664cbfe3bc88c94c8eb1d2352
        //CoveredLines: [24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]
        //Input_0_org.quartz.JobExecutionContext: {}

        OrderJob orderJob0 = new OrderJob();
        ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
        Integer integer0 = new Integer((-4));

        arrayList0.add(integer0);
        //mock accountingMapper0
        AccountingMapper accountingMapper0 = mock(AccountingMapper.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(arrayList0).when(accountingMapper0).queryAllAccounts();
        ArrayList<SerialOrder> arrayList1 = new ArrayList<SerialOrder>();
        BigDecimal bigDecimal0 = new BigDecimal(3035.741945462776);
        //mock serialOrder0
        SerialOrder serialOrder0 = mock(SerialOrder.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(bigDecimal0).when(serialOrder0).getMoney();
        doReturn("\u652F\u51FA").when(serialOrder0).getSerialType();

        arrayList1.add(serialOrder0);
        //mock serialOrderMapper0
        SerialOrderMapper serialOrderMapper0 = mock(SerialOrderMapper.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(arrayList1).when(serialOrderMapper0).querySerialOrdersOneDay(anyInt(),
            any(java.util.Date.class), any(java.util.Date.class));

        PrivateAccess.setVariable((Class<?>) OrderJob.class, orderJob0, "serialOrderMapper",
            (Object) serialOrderMapper0);

        PrivateAccess.setVariable((Class<?>) OrderJob.class, orderJob0, "accountingMapper",
            (Object) accountingMapper0);
        //mock jobExecutionContext0
        JobExecutionContext jobExecutionContext0 = mock(JobExecutionContext.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        //Call method: executeInternal
        try {
            PrivateAccess.callMethod((Class<OrderJob>) OrderJob.class, orderJob0,
                "executeInternal", (Object) jobExecutionContext0,
                (Class<?>) JobExecutionContext.class);
        } catch (Throwable e) {
            verifyException("io.sofastack.cloud.accounting.jobs.OrderJob", e);
            assertEquals("java.lang.NullPointerException", e.getClass().getName());
        }
    }

    @Test(timeout = 4000)
    public void test_executeInternal_1() throws Throwable {
        //caseID:150f2cdb36d6f3a76504e9b5a3bb05f1
        //CoveredLines: [24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54]
        //Input_0_org.quartz.JobExecutionContext: {}

        OrderJob orderJob0 = new OrderJob();
        LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
        Integer integer0 = new Integer((-1));

        linkedList0.add(integer0);
        //mock accountingMapper0
        AccountingMapper accountingMapper0 = mock(AccountingMapper.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(linkedList0).when(accountingMapper0).queryAllAccounts();
        ArrayList<SerialOrder> arrayList0 = new ArrayList<SerialOrder>();
        BigDecimal bigDecimal0 = new BigDecimal(0);
        //mock serialOrder0
        SerialOrder serialOrder0 = mock(SerialOrder.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(bigDecimal0).when(serialOrder0).getMoney();
        doReturn("7j5sYWY8d5f%Kbhw=", "\u6536\u5165").when(serialOrder0).getSerialType();

        arrayList0.add(serialOrder0);
        //mock serialOrderMapper0
        SerialOrderMapper serialOrderMapper0 = mock(SerialOrderMapper.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(arrayList0).when(serialOrderMapper0).querySerialOrdersOneDay(anyInt(),
            any(java.util.Date.class), any(java.util.Date.class));

        PrivateAccess.setVariable((Class<?>) OrderJob.class, orderJob0, "serialOrderMapper",
            (Object) serialOrderMapper0);

        PrivateAccess.setVariable((Class<?>) OrderJob.class, orderJob0, "accountingMapper",
            (Object) accountingMapper0);
        //mock jobExecutionContext0
        JobExecutionContext jobExecutionContext0 = mock(JobExecutionContext.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        //Call method: executeInternal
        try {
            PrivateAccess.callMethod((Class<OrderJob>) OrderJob.class, orderJob0,
                "executeInternal", (Object) jobExecutionContext0,
                (Class<?>) JobExecutionContext.class);
        } catch (Throwable e) {
            verifyException("io.sofastack.cloud.accounting.jobs.OrderJob", e);
            assertEquals("java.lang.NullPointerException", e.getClass().getName());
        }
    }

    @Test(timeout = 4000)
    public void test_executeInternal_2() throws Throwable {
        //caseID:751665db3f32ff2bb4c5323c84a8e2dd
        //CoveredLines: [24, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 56, 58, 59, 60]
        //Input_0_org.quartz.JobExecutionContext: {}

        OrderJob orderJob0 = new OrderJob();
        ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
        Integer integer0 = new Integer(0);

        arrayList0.add(integer0);
        //mock accountingMapper0
        AccountingMapper accountingMapper0 = mock(AccountingMapper.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(arrayList0).when(accountingMapper0).queryAllAccounts();
        //mock billMapper0
        BillMapper billMapper0 = mock(BillMapper.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        ArrayList<SerialOrder> arrayList1 = new ArrayList<SerialOrder>();
        //mock serialOrder0
        SerialOrder serialOrder0 = mock(SerialOrder.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        arrayList1.add(serialOrder0);
        //mock serialOrderMapper0
        SerialOrderMapper serialOrderMapper0 = mock(SerialOrderMapper.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(arrayList1).when(serialOrderMapper0).querySerialOrdersOneDay(anyInt(),
            any(java.util.Date.class), any(java.util.Date.class));

        PrivateAccess.setVariable((Class<?>) OrderJob.class, orderJob0, "serialOrderMapper",
            (Object) serialOrderMapper0);

        PrivateAccess.setVariable((Class<?>) OrderJob.class, orderJob0, "billMapper",
            (Object) billMapper0);

        PrivateAccess.setVariable((Class<?>) OrderJob.class, orderJob0, "accountingMapper",
            (Object) accountingMapper0);
        //mock jobExecutionContext0
        JobExecutionContext jobExecutionContext0 = mock(JobExecutionContext.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        //Call method: executeInternal
        PrivateAccess.callMethod((Class<OrderJob>) OrderJob.class, orderJob0, "executeInternal",
            (Object) jobExecutionContext0, (Class<?>) JobExecutionContext.class);
    }
}
