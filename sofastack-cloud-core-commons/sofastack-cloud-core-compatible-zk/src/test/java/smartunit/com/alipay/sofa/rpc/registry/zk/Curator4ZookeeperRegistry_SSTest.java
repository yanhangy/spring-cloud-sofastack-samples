/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.com.alipay.sofa.rpc.registry.zk;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import static org.smartunit.runtime.SmartAssertions.*;
import com.alipay.sofa.rpc.base.Destroyable;
import com.alipay.sofa.rpc.client.ProviderGroup;
import com.alipay.sofa.rpc.config.AbstractInterfaceConfig;
import com.alipay.sofa.rpc.config.ConsumerConfig;
import com.alipay.sofa.rpc.config.ProviderConfig;
import com.alipay.sofa.rpc.config.RegistryConfig;
import com.alipay.sofa.rpc.listener.ConfigListener;
import com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry;
import com.alipay.sofa.rpc.registry.zk.ZookeeperConfigObserver;
import com.alipay.sofa.rpc.registry.zk.ZookeeperOverrideObserver;
import com.alipay.sofa.rpc.registry.zk.ZookeeperProviderObserver;
import com.alipay.sofa.rpc.registry.zk.ZookeeperRegistry;
import io.netty.channel.ChannelDuplexHandler;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.Vector;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.imps.CuratorFrameworkState;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.PrivateAccess;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class)
@SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true)
public class Curator4ZookeeperRegistry_SSTest extends Curator4ZookeeperRegistry_SSTest_scaffolding {
    // allCoveredLines:[181, 182, 184, 185, 186, 188, 190, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 215, 224, 230, 231, 242, 243, 244, 246, 247, 250, 253, 254, 259, 260, 261, 262, 264, 265, 266, 270, 271, 272, 273, 295, 296, 297, 298, 300, 304, 308, 315, 324, 330, 331, 333, 334, 336, 338, 339, 340, 341, 343, 344, 345, 348, 373, 374, 376, 377, 387, 388, 390, 391, 393, 415, 416, 429, 430, 432, 433, 434, 461, 462, 469, 470, 472, 473, 475, 478, 500, 515, 520, 521, 522, 523, 527, 528, 530, 531, 533, 537, 539, 602, 611, 612, 634, 639, 641, 642, 652, 655, 657, 658, 659, 660, 663, 665, 666, 667, 668, 684, 689, 690, 691, 692, 695, 699, 700, 712, 713, 714, 723, 730]

    @Test(timeout = 4000)
    public void test_batchUnRegister_00() throws Throwable {
        //caseID:ca874bd7d2378e97cd8ee9e6f23485b1
        //CoveredLines: [469, 470, 478, 500, 515, 520, 521, 522, 523]
        //Input_0_List<ProviderConfig>: vector0

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock registryConfig0
        RegistryConfig registryConfig0 = mock(RegistryConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(true).when(registryConfig0).isRegister();

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "registryConfig", (Object) registryConfig0);
        Vector<ProviderConfig> vector0 = new Vector<ProviderConfig>();
        //mock providerConfig0
        ProviderConfig<Integer> providerConfig0 = (ProviderConfig<Integer>) mock(
            ProviderConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer())
                .stubOnly());

        vector0.add((ProviderConfig) providerConfig0);

        //Call method: batchUnRegister
        curator4ZookeeperRegistry0.batchUnRegister(vector0);

        //Test Result Assert
        assertEquals(1, vector0.size());
    }

    @Test(timeout = 4000)
    public void test_batchUnRegister_01() throws Throwable {
        //caseID:fc7a6970fc8cbdcecdf6234895613eee
        //CoveredLines: [469, 470, 472, 473, 475, 520, 521, 522, 523]
        //Input_0_List<ProviderConfig>: vector0

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock registryConfig0
        RegistryConfig registryConfig0 = mock(RegistryConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "registryConfig", (Object) registryConfig0);
        Vector<ProviderConfig> vector0 = new Vector<ProviderConfig>();
        //mock providerConfig0
        ProviderConfig providerConfig0 = mock(ProviderConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        vector0.add(providerConfig0);

        //Call method: batchUnRegister
        // Undeclared exception!
        try {
            curator4ZookeeperRegistry0.batchUnRegister(vector0);
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("java.lang.NullPointerException", e.getClass().getName());
        }
    }

    @Test(timeout = 4000)
    public void test_batchUnSubscribe_02() throws Throwable {
        //caseID:ef0d13d235fdafb289207f9183dd3939
        //CoveredLines: [639, 655, 684, 689, 690, 691, 692]
        //Input_0_List<ConsumerConfig>: stack0

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        Stack<ConsumerConfig> stack0 = new Stack<ConsumerConfig>();
        //mock consumerConfig0
        ConsumerConfig consumerConfig0 = mock(ConsumerConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        stack0.add(consumerConfig0);

        //Call method: batchUnSubscribe
        curator4ZookeeperRegistry0.batchUnSubscribe(stack0);

        //Test Result Assert
        assertTrue(stack0.contains(consumerConfig0));
    }

    @Test(timeout = 4000)
    public void test_batchUnSubscribe_03() throws Throwable {
        //caseID:73eae7fa894d8d9ce0a2091efce7fb7c
        //CoveredLines: [639, 641, 642, 652, 655, 684, 689, 690, 691, 692]
        //Input_0_List<ConsumerConfig>: linkedList0

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock map0
        Map<ConsumerConfig, String> map0 = (Map<ConsumerConfig, String>) mock(Map.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "consumerUrls", (Object) map0);
        LinkedList<ConsumerConfig> linkedList0 = new LinkedList<ConsumerConfig>();
        //mock consumerConfig0
        ConsumerConfig consumerConfig0 = mock(ConsumerConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(true).when(consumerConfig0).isRegister();
        doReturn(false).when(consumerConfig0).isSubscribe();

        linkedList0.add(consumerConfig0);

        //Call method: batchUnSubscribe
        curator4ZookeeperRegistry0.batchUnSubscribe(linkedList0);

        //Test Result Assert
        assertEquals(1, linkedList0.size());
    }

    @Test(timeout = 4000)
    public void test_batchUnSubscribe_04() throws Throwable {
        //caseID:a3b49a8001179c97471188768abac408
        //CoveredLines: [639, 641, 642, 652, 655, 657, 663, 665, 666, 667, 668, 689, 690]
        //Input_0_List<ConsumerConfig>: linkedList0

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock zookeeperProviderObserver0
        ZookeeperProviderObserver zookeeperProviderObserver0 = mock(
            ZookeeperProviderObserver.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock map0
        Map<ConsumerConfig, String> map0 = (Map<ConsumerConfig, String>) mock(Map.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "consumerUrls", (Object) map0);

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "providerObserver", (Object) zookeeperProviderObserver0);
        LinkedList<ConsumerConfig> linkedList0 = new LinkedList<ConsumerConfig>();
        //mock consumerConfig0
        ConsumerConfig consumerConfig0 = mock(ConsumerConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(true).when(consumerConfig0).isRegister();
        doReturn(true).when(consumerConfig0).isSubscribe();

        linkedList0.add(consumerConfig0);

        //Call method: batchUnSubscribe
        // Undeclared exception!
        try {
            curator4ZookeeperRegistry0.batchUnSubscribe(linkedList0);
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException", e.getClass()
                .getName());
            assertEquals("Failed to unsubscribe consumer config from zookeeperRegistry!",
                e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_destroy_05() throws Throwable {
        //caseID:5b6a2aca64f5e1811eb07c1a91b410bb
        //CoveredLines: [259, 260, 261, 264, 265, 266, 723, 730]

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock map0
        Map<ConsumerConfig, String> map0 = (Map<ConsumerConfig, String>) mock(Map.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock map1
        Map<ProviderConfig, List<String>> map1 = (Map<ProviderConfig, List<String>>) mock(
            Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock curatorFramework0
        CuratorFramework curatorFramework0 = mock(CuratorFramework.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "zkClient", (Object) curatorFramework0);

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "providerUrls", (Object) map1);

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "consumerUrls", (Object) map0);

        //Call method: destroy
        // Undeclared exception!
        try {
            curator4ZookeeperRegistry0.destroy();
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("java.lang.NullPointerException", e.getClass().getName());
        }
    }

    @Test(timeout = 4000)
    public void test_destroy_06() throws Throwable {
        //caseID:9d39b0ea0335e7afde45110a72ffff58
        //CoveredLines: [259, 260, 261, 264, 265, 266, 270, 271, 272, 273, 723, 730]
        //Input_0_Destroyable.DestroyHook: {}

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock map0
        Map<ConsumerConfig, String> map0 = (Map<ConsumerConfig, String>) mock(Map.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock map1
        Map<ProviderConfig, List<String>> map1 = (Map<ProviderConfig, List<String>>) mock(
            Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "providerUrls", (Object) map1);

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "consumerUrls", (Object) map0);
        //mock destroyable_DestroyHook0
        Destroyable.DestroyHook destroyable_DestroyHook0 = mock(Destroyable.DestroyHook.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        //Call method: destroy
        // Undeclared exception!
        try {
            curator4ZookeeperRegistry0.destroy(destroyable_DestroyHook0);
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("java.lang.NullPointerException", e.getClass().getName());
        }
    }

    @Test(timeout = 4000)
    public void test_destroy_07() throws Throwable {
        //caseID:99533ea426ce5d46a894b2b8515e359a
        //CoveredLines: [259, 260, 261, 262, 264, 265, 266, 270, 271, 272, 273, 723, 730]
        //Input_0_Destroyable.DestroyHook: {}

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock map0
        Map<ConsumerConfig, String> map0 = (Map<ConsumerConfig, String>) mock(Map.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock map1
        Map<ProviderConfig, List<String>> map1 = (Map<ProviderConfig, List<String>>) mock(
            Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        CuratorFrameworkState curatorFrameworkState0 = CuratorFrameworkState.STARTED;
        //mock curatorFramework0
        CuratorFramework curatorFramework0 = mock(CuratorFramework.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(curatorFrameworkState0).when(curatorFramework0).getState();

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "zkClient", (Object) curatorFramework0);

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "providerUrls", (Object) map1);

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "consumerUrls", (Object) map0);
        //mock destroyable_DestroyHook0
        Destroyable.DestroyHook destroyable_DestroyHook0 = mock(Destroyable.DestroyHook.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        //Call method: destroy
        // Undeclared exception!
        try {
            curator4ZookeeperRegistry0.destroy(destroyable_DestroyHook0);
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("java.lang.NullPointerException", e.getClass().getName());
        }
    }

    @Test(timeout = 4000)
    public void test_getAndCheckZkClient_08() throws Throwable {
        //caseID:5b871623a01be6a3262da72b2ed86da7
        //CoveredLines: [699, 700]

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);

        //Call method: getAndCheckZkClient
        try {
            PrivateAccess.callMethod(
                (Class<Curator4ZookeeperRegistry>) Curator4ZookeeperRegistry.class,
                curator4ZookeeperRegistry0, "getAndCheckZkClient");
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException", e.getClass()
                .getName());
            assertEquals("Zookeeper client is not available", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_getZkClient_09() throws Throwable {
        //caseID:8e842bd3c6e0339344e0eaf1f8ca1ad2
        //CoveredLines: [695]
        //Assert: assertNull(method_result);

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);

        //Call method: getZkClient
        Object object0 = PrivateAccess.callMethod(
            (Class<Curator4ZookeeperRegistry>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "getZkClient");

        //Test Result Assert
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test_init_10() throws Throwable {
        //caseID:724399962f413aa93d01668800dad321
        //CoveredLines: [181, 182]

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock curatorFramework0
        CuratorFramework curatorFramework0 = mock(CuratorFramework.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "zkClient", (Object) curatorFramework0);

        //Call method: init
        curator4ZookeeperRegistry0.init();
    }

    @Test(timeout = 4000)
    public void test_init_11() throws Throwable {
        //caseID:3db2d55307867e9b9077831d32f861cd
        //CoveredLines: [181, 184, 185, 186]

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock registryConfig0
        RegistryConfig registryConfig0 = mock(RegistryConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "registryConfig", (Object) registryConfig0);

        //Call method: init
        // Undeclared exception!
        try {
            curator4ZookeeperRegistry0.init();
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException", e.getClass()
                .getName());
            assertEquals("Address of zookeeper registry is empty.", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_init_12() throws Throwable {
        //caseID:62c18582a96b20e8e1b79179992327f3
        //CoveredLines: [181, 184, 185, 188, 190, 197, 198, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 215, 224]

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock registryConfig0
        RegistryConfig registryConfig0 = mock(RegistryConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("RECONNECTED").when(registryConfig0).getAddress();

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "registryConfig", (Object) registryConfig0);

        //Call method: init
        // Undeclared exception!
        try {
            curator4ZookeeperRegistry0.init();
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("java.lang.NullPointerException", e.getClass().getName());
        }
    }

    @Test(timeout = 4000)
    public void test_recoverRegistryData_13() throws Throwable {
        //caseID:b6dea550070903035702bb7113996d36
        //CoveredLines: [230, 231, 324, 330, 331, 336, 338, 339, 340, 341, 343, 344, 345, 348, 373, 374, 699, 700]

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        LinkedHashSet<ProviderConfig> linkedHashSet0 = new LinkedHashSet<ProviderConfig>();
        //mock providerConfig0
        ProviderConfig providerConfig0 = mock(ProviderConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn("Failed to unsubscribe provider config from zookeeperRegistry!").when(
            providerConfig0).getAppName();
        doReturn("00201").when(providerConfig0).getInterfaceId();

        linkedHashSet0.add(providerConfig0);
        LinkedList<String> linkedList0 = new LinkedList<String>();

        linkedList0.add("?");
        //mock map0
        Map<ProviderConfig, List<String>> map0 = (Map<ProviderConfig, List<String>>) mock(
            Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(true).when(map0).containsKey(any());
        doReturn(linkedList0).when(map0).get(any());
        doReturn(linkedHashSet0).when(map0).keySet();
        CuratorFrameworkState curatorFrameworkState0 = CuratorFrameworkState.LATENT;
        //mock curatorFramework0
        CuratorFramework curatorFramework0 = mock(CuratorFramework.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(curatorFrameworkState0).when(curatorFramework0).getState();

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "zkClient", (Object) curatorFramework0);

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "providerUrls", (Object) map0);

        //Call method: recoverRegistryData
        try {
            PrivateAccess.callMethod(
                (Class<Curator4ZookeeperRegistry>) Curator4ZookeeperRegistry.class,
                curator4ZookeeperRegistry0, "recoverRegistryData");
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException", e.getClass()
                .getName());
            assertEquals("Failed to register provider to zookeeperRegistry!", e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_register_14() throws Throwable {
        //caseID:7d8b2f963e072339959ddcf355a8c185
        //CoveredLines: [295, 296, 304, 308, 315]
        //Input_0_ProviderConfig: {getAppName=\"pz\"}

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock registryConfig0
        RegistryConfig registryConfig0 = mock(RegistryConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(true).when(registryConfig0).isRegister();

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "registryConfig", (Object) registryConfig0);
        //mock providerConfig0
        ProviderConfig<ConsumerConfig<ProviderGroup>> providerConfig0 = (ProviderConfig<ConsumerConfig<ProviderGroup>>) mock(
            ProviderConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer())
                .stubOnly());
        doReturn("pz").when(providerConfig0).getAppName();

        //Call method: register
        curator4ZookeeperRegistry0.register(providerConfig0);
    }

    @Test(timeout = 4000)
    public void test_register_15() throws Throwable {
        //caseID:3ec528cee220211d63298ad7892c8f82
        //CoveredLines: [295, 296, 297, 298, 300]
        //Input_0_ProviderConfig: {}

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock registryConfig0
        RegistryConfig registryConfig0 = mock(RegistryConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "registryConfig", (Object) registryConfig0);
        //mock providerConfig0
        ProviderConfig<String> providerConfig0 = (ProviderConfig<String>) mock(
            ProviderConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer())
                .stubOnly());

        //Call method: register
        // Undeclared exception!
        try {
            curator4ZookeeperRegistry0.register(providerConfig0);
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("java.lang.NullPointerException", e.getClass().getName());
        }
    }

    @Test(timeout = 4000)
    public void test_registerProviderUrls_16() throws Throwable {
        //caseID:1354f4d632d6d9ed39c0c5782b937139
        //CoveredLines: [324, 330, 333, 334, 336, 376, 377]
        //Input_0_com.alipay.sofa.rpc.config.ProviderConfig: {}

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock map0
        Map<ProviderConfig, List<String>> map0 = (Map<ProviderConfig, List<String>>) mock(
            Map.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "providerUrls", (Object) map0);
        //mock providerConfig0
        ProviderConfig<Object> providerConfig0 = (ProviderConfig<Object>) mock(
            ProviderConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer())
                .stubOnly());

        //Call method: registerProviderUrls
        PrivateAccess.callMethod(
            (Class<Curator4ZookeeperRegistry>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "registerProviderUrls", (Object) providerConfig0,
            (Class<?>) ProviderConfig.class);
    }

    @Test(timeout = 4000)
    public void test_start_17() throws Throwable {
        //caseID:57f0224f6891eb39a9a24935fe836a26
        //CoveredLines: [242, 246, 247]
        //Assert: assertTrue(method_result);

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        CuratorFrameworkState curatorFrameworkState0 = CuratorFrameworkState.STOPPED;
        CuratorFrameworkState curatorFrameworkState1 = CuratorFrameworkState.STARTED;
        //mock curatorFramework0
        CuratorFramework curatorFramework0 = mock(CuratorFramework.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(curatorFrameworkState1, curatorFrameworkState0).when(curatorFramework0).getState();

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "zkClient", (Object) curatorFramework0);

        //Call method: start
        boolean boolean0 = curator4ZookeeperRegistry0.start();

        //Test Result Assert
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test_start_18() throws Throwable {
        //caseID:9a4f4065c53b183a9489be6fd6cef84b
        //CoveredLines: [242, 243, 244]

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);

        //Call method: start
        // Undeclared exception!
        try {
            curator4ZookeeperRegistry0.start();
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("java.lang.NullPointerException", e.getClass().getName());
        }
    }

    @Test(timeout = 4000)
    public void test_start_19() throws Throwable {
        //caseID:66c019a8376e0c34069fad9990031c0c
        //CoveredLines: [242, 246, 250, 253, 254]
        //Assert: assertFalse(method_result);

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock curatorFramework0
        CuratorFramework curatorFramework0 = mock(CuratorFramework.class, withSettings()
            .defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "zkClient", (Object) curatorFramework0);

        //Call method: start
        boolean boolean0 = curator4ZookeeperRegistry0.start();

        //Test Result Assert
        assertFalse(boolean0);
    }

    @Test(timeout = 4000)
    public void test_subscribe_20() throws Throwable {
        //caseID:a2ad82f429744bcd91fbb57f5b6b1e8b
        //CoveredLines: [527, 528, 530, 531, 533]
        //Input_0_ConsumerConfig: {}

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock registryConfig0
        RegistryConfig registryConfig0 = mock(RegistryConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "registryConfig", (Object) registryConfig0);
        //mock consumerConfig0
        ConsumerConfig<ConsumerConfig<ZookeeperRegistry>> consumerConfig0 = (ConsumerConfig<ConsumerConfig<ZookeeperRegistry>>) mock(
            ConsumerConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer())
                .stubOnly());

        //Call method: subscribe
        // Undeclared exception!
        try {
            curator4ZookeeperRegistry0.subscribe(consumerConfig0);
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("java.lang.NullPointerException", e.getClass().getName());
        }
    }

    @Test(timeout = 4000)
    public void test_subscribe_21() throws Throwable {
        //caseID:e14dcb3fb12d494d245fad7befe16519
        //CoveredLines: [527, 528, 537, 539, 602, 611, 612, 634]
        //Input_0_ConsumerConfig: {getAppName=\"BUILD_INITIAL_CACHE\"}
        //Assert: assertNull(method_result);

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock registryConfig0
        RegistryConfig registryConfig0 = mock(RegistryConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        doReturn(true).when(registryConfig0).isSubscribe();

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "registryConfig", (Object) registryConfig0);
        //mock consumerConfig0
        ConsumerConfig<Map.Entry<ChannelDuplexHandler, String>> consumerConfig0 = (ConsumerConfig<Map.Entry<ChannelDuplexHandler, String>>) mock(
            ConsumerConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer())
                .stubOnly());
        doReturn("BUILD_INITIAL_CACHE").when(consumerConfig0).getAppName();

        //Call method: subscribe
        List<ProviderGroup> list0 = curator4ZookeeperRegistry0.subscribe(consumerConfig0);

        //Test Result Assert
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test_subscribeConfig_22() throws Throwable {
        //caseID:250f548bf756e8ee1eec8472e0e12cae
        //CoveredLines: [387, 390, 391, 393, 415, 416]
        //Input_0_com.alipay.sofa.rpc.config.AbstractInterfaceConfig: {}
        //Input_1_com.alipay.sofa.rpc.listener.ConfigListener: {}

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock zookeeperConfigObserver0
        ZookeeperConfigObserver zookeeperConfigObserver0 = mock(ZookeeperConfigObserver.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "configObserver", (Object) zookeeperConfigObserver0);
        //mock abstractInterfaceConfig0
        AbstractInterfaceConfig<ZookeeperRegistry, ProviderConfig<Object>> abstractInterfaceConfig0 = (AbstractInterfaceConfig<ZookeeperRegistry, ProviderConfig<Object>>) mock(
            AbstractInterfaceConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock configListener0
        ConfigListener configListener0 = mock(ConfigListener.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        //Call method: subscribeConfig
        try {
            PrivateAccess.callMethod(
                (Class<Curator4ZookeeperRegistry>) Curator4ZookeeperRegistry.class,
                curator4ZookeeperRegistry0, "subscribeConfig", (Object) abstractInterfaceConfig0,
                (Class<?>) AbstractInterfaceConfig.class, (Object) configListener0,
                (Class<?>) ConfigListener.class);
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException", e.getClass()
                .getName());
            assertEquals("Failed to subscribe provider config from zookeeperRegistry!",
                e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_subscribeConfig_23() throws Throwable {
        //caseID:dfc6125b3bd9593322d3476ca83dd657
        //CoveredLines: [387, 388, 390, 391, 393, 415, 416]
        //Input_0_com.alipay.sofa.rpc.config.AbstractInterfaceConfig: {}
        //Input_1_com.alipay.sofa.rpc.listener.ConfigListener: {}

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock abstractInterfaceConfig0
        AbstractInterfaceConfig<Object, ConsumerConfig<ProviderGroup>> abstractInterfaceConfig0 = (AbstractInterfaceConfig<Object, ConsumerConfig<ProviderGroup>>) mock(
            AbstractInterfaceConfig.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
        //mock configListener0
        ConfigListener configListener0 = mock(ConfigListener.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        //Call method: subscribeConfig
        try {
            PrivateAccess.callMethod(
                (Class<Curator4ZookeeperRegistry>) Curator4ZookeeperRegistry.class,
                curator4ZookeeperRegistry0, "subscribeConfig", (Object) abstractInterfaceConfig0,
                (Class<?>) AbstractInterfaceConfig.class, (Object) configListener0,
                (Class<?>) ConfigListener.class);
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException", e.getClass()
                .getName());
            assertEquals("Failed to subscribe provider config from zookeeperRegistry!",
                e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_subscribeOverride_24() throws Throwable {
        //caseID:d588d01f6af6babfc80219425b3aec95
        //CoveredLines: [429, 432, 433, 434, 461, 462, 712, 713, 714]
        //Input_0_com.alipay.sofa.rpc.config.ConsumerConfig: {}
        //Input_1_com.alipay.sofa.rpc.listener.ConfigListener: {}

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock zookeeperOverrideObserver0
        ZookeeperOverrideObserver zookeeperOverrideObserver0 = mock(
            ZookeeperOverrideObserver.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        PrivateAccess.setVariable((Class<?>) Curator4ZookeeperRegistry.class,
            curator4ZookeeperRegistry0, "overrideObserver", (Object) zookeeperOverrideObserver0);
        //mock consumerConfig0
        ConsumerConfig<ConsumerConfig<String>> consumerConfig0 = (ConsumerConfig<ConsumerConfig<String>>) mock(
            ConsumerConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer())
                .stubOnly());
        //mock configListener0
        ConfigListener configListener0 = mock(ConfigListener.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        //Call method: subscribeOverride
        try {
            PrivateAccess.callMethod(
                (Class<Curator4ZookeeperRegistry>) Curator4ZookeeperRegistry.class,
                curator4ZookeeperRegistry0, "subscribeOverride", (Object) consumerConfig0,
                (Class<?>) ConsumerConfig.class, (Object) configListener0,
                (Class<?>) ConfigListener.class);
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException", e.getClass()
                .getName());
            assertEquals("Failed to subscribe provider config from zookeeperRegistry!",
                e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_subscribeOverride_25() throws Throwable {
        //caseID:f9ca08a20c5d7a9b128491a4cd74ec05
        //CoveredLines: [429, 430, 432, 433, 434, 461, 462, 712, 713, 714]
        //Input_0_com.alipay.sofa.rpc.config.ConsumerConfig: {}
        //Input_1_com.alipay.sofa.rpc.listener.ConfigListener: {}

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock consumerConfig0
        ConsumerConfig<ProviderGroup> consumerConfig0 = (ConsumerConfig<ProviderGroup>) mock(
            ConsumerConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer())
                .stubOnly());
        //mock configListener0
        ConfigListener configListener0 = mock(ConfigListener.class,
            withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());

        //Call method: subscribeOverride
        try {
            PrivateAccess.callMethod(
                (Class<Curator4ZookeeperRegistry>) Curator4ZookeeperRegistry.class,
                curator4ZookeeperRegistry0, "subscribeOverride", (Object) consumerConfig0,
                (Class<?>) ConsumerConfig.class, (Object) configListener0,
                (Class<?>) ConfigListener.class);
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException", e.getClass()
                .getName());
            assertEquals("Failed to subscribe provider config from zookeeperRegistry!",
                e.getMessage());
        }
    }

    @Test(timeout = 4000)
    public void test_unSubscribe_26() throws Throwable {
        //caseID:f0c7a0bb4df78c292be130aab7d65b27
        //CoveredLines: [639, 655, 657, 658, 659, 660]
        //Input_0_ConsumerConfig: {isSubscribe=true, isRegister=false}

        //mock curator4ZookeeperRegistry0
        Curator4ZookeeperRegistry curator4ZookeeperRegistry0 = mock(
            Curator4ZookeeperRegistry.class, CALLS_REAL_METHODS);
        //mock consumerConfig0
        ConsumerConfig<Object> consumerConfig0 = (ConsumerConfig<Object>) mock(
            ConsumerConfig.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer())
                .stubOnly());
        doReturn(false).when(consumerConfig0).isRegister();
        doReturn(true).when(consumerConfig0).isSubscribe();

        //Call method: unSubscribe
        // Undeclared exception!
        try {
            curator4ZookeeperRegistry0.unSubscribe(consumerConfig0);
        } catch (Throwable e) {
            verifyException("com.alipay.sofa.rpc.registry.zk.Curator4ZookeeperRegistry", e);
            assertEquals("com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException", e.getClass()
                .getName());
            assertEquals("Failed to unsubscribe provider from zookeeperRegistry!", e.getMessage());
        }
    }
}
