/*
 * This file was automatically generated by SmartUnit
 */

package smartunit.io.sofastack.cloud.common.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import java.lang.reflect.Method;
import static org.smartunit.shaded.org.mockito.Mockito.*;
import org.smartunit.shaded.org.mockito.ArgumentMatchers;
import io.sofastack.cloud.common.model.TransferRequest;
import io.sofastack.cloud.common.utils.OrderUtils;
import org.junit.runner.RunWith;
import org.smartunit.runtime.ExecutorServiceAnswer;
import org.smartunit.runtime.SmartRunner;
import org.smartunit.runtime.SmartRunnerParameters;
import org.smartunit.runtime.TransactionTemplateAnswer;
import org.smartunit.runtime.ViolatedAssumptionAnswer;

@RunWith(SmartRunner.class) @SmartRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class OrderUtils_SSTest extends OrderUtils_SSTest_scaffolding {
// allCoveredLines:[14, 17, 21, 25, 26, 30, 31, 32, 34, 35]

  @Test(timeout = 4000)
  public void test_getSerialNo_0()  throws Throwable  {
      //caseID:34a8f4542daef1596103c6e9cd63d302
      //CoveredLines: [17, 25, 26, 30, 31, 32]
      //Input_0_TransferRequest: null
      //Assert: assertEquals("20140214082121320000", method_result);
      
      
      //Call method: getSerialNo
      String string0 = OrderUtils.getSerialNo((TransferRequest) null);
      
      //Test Result Assert
      assertEquals("20140214082121320000", string0);
  }

  @Test(timeout = 4000)
  public void test_getSerialNo_1()  throws Throwable  {
      //caseID:cb87dd3ae4ec0da6539934c63ac22d27
      //CoveredLines: [17, 25, 26, 30, 34, 35]
      //Input_0_TransferRequest: {getUserId=100}
      //Assert: assertEquals("20140214082121320001", method_result);
      
      //mock transferRequest0
      TransferRequest transferRequest0 = mock(TransferRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      doReturn(100).when(transferRequest0).getUserId();
      
      //Call method: getSerialNo
      String string0 = OrderUtils.getSerialNo(transferRequest0);
      
      //Test Result Assert
      assertEquals("20140214082121320001", string0);
  }

  @Test(timeout = 4000)
  public void test_getSerialNo_2()  throws Throwable  {
      //caseID:c3a7f9c9bc1891075569ddc03e2ff6a0
      //CoveredLines: [14, 17, 25, 26, 30, 34, 35]
      //Input_0_TransferRequest: {}
      //Assert: assertEquals("20140214082121320002", method_result);
      
      OrderUtils orderUtils0 = new OrderUtils();
      //mock transferRequest0
      TransferRequest transferRequest0 = mock(TransferRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getSerialNo
      String string0 = OrderUtils.getSerialNo(transferRequest0);
      
      //Test Result Assert
      assertEquals("20140214082121320002", string0);
  }

  @Test(timeout = 4000)
  public void test_getTradingNo_3()  throws Throwable  {
      //caseID:5e77f5f8e61e6401a42b5213ebcbbef5
      //CoveredLines: [21, 25, 26, 30, 34, 35]
      //Input_0_TransferRequest: {}
      //Assert: assertEquals("20140214082121320001", method_result);
      
      //mock transferRequest0
      TransferRequest transferRequest0 = mock(TransferRequest.class, withSettings().defaultAnswer(new ViolatedAssumptionAnswer()).stubOnly());
      
      //Call method: getTradingNo
      String string0 = OrderUtils.getTradingNo(transferRequest0);
      
      //Test Result Assert
      assertEquals("20140214082121320001", string0);
  }
}
